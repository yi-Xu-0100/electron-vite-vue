name: CI

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main

permissions:
  pull-requests: write

jobs:
  job1:
    name: Check Not Allowed File Changes
    runs-on: ubuntu-latest
    outputs:
      markdown: ${{ steps.filter_markdown.outputs.change }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check Not Allowed File Changes
        uses: dorny/paths-filter@v2
        id: filter_not_allowed
        with:
          list-files: json
          filters: |
            change:
              - 'package-lock.json'
              - 'yarn-lock.json'
              - 'pnpm-lock.yaml'

      # ref: https://github.com/github/docs/blob/main/.github/workflows/triage-unallowed-contributions.yml
      - name: Comment About Changes We Can't Accept
        if: ${{ steps.filter_not_allowed.outputs.change }}
        uses: actions/github-script@v6
        with:
          script: |
            let workflowFailMessage = "It looks like you've modified some files that we can't accept as contributions."
            if(process.env.GITHUB_EVENT_NAME === 'pull_request') {
              try {
                const badFilesArr = [
                  'package-lock.json',
                  'yarn-lock.json',
                  'pnpm-lock.yaml',
                ]
                const badFiles = badFilesArr.join('\n')
                const reviewMessage = `ðŸ‘‹ Hey there spelunker. It looks like you've modified some files that we can't accept as contributions. The complete list of files we can't accept are:\n${badFiles}\n\nYou'll need to revert all of the files you changed in that list using [GitHub Desktop](https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/reverting-a-commit) or \`git checkout origin/main <file name>\`. Once you get those files reverted, we can continue with the review process. :octocat:`
                createdComment = await github.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.number,
                  body: reviewMessage,
                })
                workflowFailMessage = `${workflowFailMessage} Please see ${createdComment.data.html_url} for details.`
              } catch(err) {
                console.log("Error creating comment.", err)
              }
            }
            core.setFailed(workflowFailMessage)

      - name: Check Not Linted Markdown
        if: ${{ always() }}
        uses: dorny/paths-filter@v2
        id: filter_markdown
        with:
          list-files: shell
          filters: |
            change:
              - added|modified: '*.md'


  job2:
    name: Lint Markdown
    runs-on: ubuntu-latest
    needs: job1
    if: ${{ always() && needs.job1.outputs.markdown == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Lint Markdown
        if: ${{ steps.filter.outputs.markdown == 'true' }}
        run: npx textlint ${{ steps.filter.outputs.markdown_files }}